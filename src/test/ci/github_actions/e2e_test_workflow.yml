name: End-to-End Tests

# Workflow Triggers
on:
  # Triggered on pull requests to the main branch
  pull_request:
    branches:
      - main

  # Triggered manually via workflow dispatch with optional inputs
  workflow_dispatch:
    inputs:
      failure_rate:
        description: 'Percentage of mock API requests that should fail (0-100)'
        required: false
        default: '0'
        type: number
      delay_rate:
        description: 'Percentage of mock API requests that should be delayed (0-100)'
        required: false
        default: '0'
        type: number
      test_markers:
        description: 'Pytest markers to select specific test categories'
        required: false
        default: 'e2e'
        type: string
      test_scenarios:
        description: 'Specific test scenarios to run (normal, high_volatility, corporate_event, hard_to_borrow, long_term_loan)'
        required: false
        default: ''
        type: string

  # Triggered on a schedule (daily at midnight UTC)
  schedule:
    - cron: '0 0 * * *'

# Global Environment Variables
env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: '${{ secrets.DOCKER_REGISTRY }}'
  IMAGE_NAME: 'borrow-rate-engine'
  MOCK_FAILURE_RATE: '0'
  MOCK_DELAY_RATE: '0'
  TEST_TIMEOUT_MINUTES: '30'

# Jobs
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.TEST_TIMEOUT_MINUTES }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout: v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4 # actions/setup-python: v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # docker/setup-buildx-action: v2

      # Step 4: Login to Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v2 # docker/login-action: v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Step 5: Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3 # actions/cache: v3
        with:
          path: ~/.cache/pip
          key: pip-e2e-${{ hashFiles('src/test/requirements.txt') }}
          restore-keys: |
            pip-e2e-

      # Step 6: Install dependencies
      - name: Install dependencies
        run: pip install -r src/test/requirements.txt

      # Step 7: Set environment variables
      - name: Set environment variables
        run: |
          echo "MOCK_FAILURE_RATE=${{ github.event.inputs.failure_rate || env.MOCK_FAILURE_RATE }}" >> $GITHUB_ENV
          echo "MOCK_DELAY_RATE=${{ github.event.inputs.delay_rate || env.MOCK_DELAY_RATE }}" >> $GITHUB_ENV

      # Step 8: Start mock servers
      - name: Start mock servers
        run: docker-compose -f src/test/mock_servers/docker-compose.yml up -d
        env:
          FAILURE_RATE: '${{ env.MOCK_FAILURE_RATE }}'
          DELAY_RATE: '${{ env.MOCK_DELAY_RATE }}'

      # Step 9: Set up test environment
      - name: Set up test environment
        run: docker-compose -f src/test/docker/docker-compose.test.yml up -d

      # Step 10: Wait for services to be ready
      - name: Wait for services to be ready
        run: sleep 30

      # Step 11: Run end-to-end tests
      - name: Run end-to-end tests
        run: src/test/scripts/run_e2e_tests.sh --junit-report --html-report --markers="${{ github.event.inputs.test_markers || 'e2e' }}" ${{ github.event.inputs.test_scenarios && format('--test-path="src/test/e2e_tests/test_{0}.py"', github.event.inputs.test_scenarios) || '' }}
        env:
          TEST_IMAGE: '${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          FAILURE_RATE: '${{ env.MOCK_FAILURE_RATE }}'
          DELAY_RATE: '${{ env.MOCK_DELAY_RATE }}'

      # Step 12: Upload test reports
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3 # actions/upload-artifact: v3
        with:
          name: e2e-test-reports
          path: src/test/reports/
          retention-days: 14

      # Step 13: Tear down test environment
      - name: Tear down test environment
        if: always()
        run: docker-compose -f src/test/docker/docker-compose.test.yml down -v && docker-compose -f src/test/mock_servers/docker-compose.yml down -v