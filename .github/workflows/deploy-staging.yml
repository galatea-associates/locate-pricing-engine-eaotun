# .github/workflows/deploy-staging.yml
# Deploys the Borrow Rate & Locate Fee Pricing Engine to the staging environment.
# This workflow automates the deployment process to ensure consistent and reliable deployments to the staging Kubernetes cluster with appropriate testing and validation steps.
name: Deploy to Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:
    description: Manual trigger for staging deployment
    inputs:
      version:
        description: 'Version tag to deploy'
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: borrow-rate-engine-staging
  KUSTOMIZE_PATH: infrastructure/kubernetes/overlays/staging
  NAMESPACE: borrow-rate-engine-staging

jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      image_tag: ${{ steps.meta.outputs.sha_short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout: v3 - Checkout repository code for deployment

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # aws-actions/configure-aws-credentials: v2 - Configure AWS credentials for EKS cluster access
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 # aws-actions/amazon-ecr-login: v1 - Log in to Amazon ECR for container image access
        id: ecr-login

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3 # azure/setup-kubectl: v3 - Set up kubectl for Kubernetes deployments
        with:
          version: v1.28.0

      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v2 # azure/k8s-set-context: v2 - Set Kubernetes context to the staging EKS cluster
        with:
          method: aws
          cluster-name: ${{ env.EKS_CLUSTER_NAME }}
          cluster-type: eks

      - name: Extract metadata
        id: meta
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Determine image tag
        id: image-tag
        run: echo "::set-output name=tag::${{ github.event.inputs.version || steps.meta.outputs.sha_short }}"

      - name: Create deployment record
        id: create-deployment
        uses: actions/github-script@v6 # actions/github-script: v6 - Send deployment notifications and updates
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.image-tag.outputs.tag }}',
              environment: 'staging',
              auto_merge: false,
              required_contexts: [],
              description: 'Staging deployment initiated by ${{ github.actor }}'
            });
            return deployment.data.id;

      - name: Update kustomization.yaml with new image tag
        run: |
          cd ${{ env.KUSTOMIZE_PATH }}
          kustomize edit set image ${{ steps.ecr-login.outputs.registry }}/borrow-rate-engine:${{ steps.image-tag.outputs.tag }}

      - name: Take database backup
        run: aws rds create-db-snapshot --db-instance-identifier borrow-rate-engine-staging --db-snapshot-identifier pre-deploy-${{ steps.image-tag.outputs.tag }}-$(date +%Y%m%d%H%M%S)

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v2 # azure/k8s-deploy: v2 - Deploy to Kubernetes using kustomize
        with:
          namespace: ${{ env.NAMESPACE }}
          manifests: ${{ env.KUSTOMIZE_PATH }}
          kubectl-version: v1.28.0
          strategy: standard

      - name: Verify Deployment
        run: kubectl rollout status deployment/api-gateway -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Run Database Migrations
        run: kubectl exec -n ${{ env.NAMESPACE }} deploy/api-gateway -- python -m alembic upgrade head

      - name: Run Integration Tests
        run: src/test/scripts/run_integration_tests.sh --environment staging --junit-report --html-report

      - name: Run E2E Tests
        run: src/test/scripts/run_e2e_tests.sh --environment staging --subset critical

      - name: Update deployment status
        if: success()
        uses: actions/github-script@v6 # actions/github-script: v6 - Send deployment notifications and updates
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://api-staging.borrow-rate-engine.example.com',
              description: 'Staging deployment completed successfully'
            });

      - name: Notify Deployment Success
        if: success()
        uses: actions/github-script@v6 # actions/github-script: v6 - Send deployment notifications and updates
        with:
          script: |
            const { repo, owner } = context.repo;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner,
              repo,
              body: `✅ Staging deployment of version ${{ steps.image-tag.outputs.tag }} completed successfully.`
            });

      - name: Update deployment status on failure
        if: failure()
        uses: actions/github-script@v6 # actions/github-script: v6 - Send deployment notifications and updates
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'failure',
              description: 'Staging deployment failed'
            });

      - name: Notify Deployment Failure
        if: failure()
        uses: actions/github-script@v6 # actions/github-script: v6 - Send deployment notifications and updates
        with:
          script: |
            const { repo, owner } = context.repo;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner,
              repo,
              body: `❌ Staging deployment of version ${{ steps.image-tag.outputs.tag }} failed. [View details](https://github.com/${owner}/${repo}/actions/runs/${context.runId})`
            });

  post-deployment-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-to-staging]
    if: success()
    steps:
      - name: Monitor staging metrics
        run: src/test/scripts/monitor_deployment.sh --environment staging --duration 1800 --threshold 0.5

      - name: Generate deployment report
        run: python src/test/scripts/generate_test_report.py --type deployment --environment staging --version ${{ needs.deploy-to-staging.outputs.image_tag }}

      - name: Upload deployment report
        uses: actions/upload-artifact@v3 # actions/upload-artifact: v3 - Upload artifacts from the workflow
        with:
          name: staging-deployment-report
          path: src/test/reports/deployment-report-${{ needs.deploy-to-staging.outputs.image_tag }}.html
          retention-days: 30